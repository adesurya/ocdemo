<%- include('../partials/header') %>

<div class="max-w-3xl mx-auto">
  <div class="bg-white rounded-lg shadow-md p-6 mb-8">
    <% if (locals.error) { %>
        <div class="mb-4 p-3 bg-red-100 text-red-800 rounded-md">
          <i class="fas fa-exclamation-circle mr-1"></i> <%= error %>
        </div>
      <% } %>
      
      <% if (locals.success) { %>
        <div class="mb-4 p-3 bg-green-100 text-green-800 rounded-md">
          <i class="fas fa-check-circle mr-1"></i> <%= success %>
        </div>
      <% } %>
    <div class="flex justify-between items-center mb-6">
      <h2 class="text-2xl font-bold text-gray-800">Upload File</h2>
      <a href="/scenarios<%= parentId ? `?folder=${parentId}` : '' %>" class="text-blue-600 hover:text-blue-800">
        <i class="fas fa-arrow-left mr-1"></i> Back to Folders
      </a>
    </div>
    
    <% if (parentFolder) { %>
      <div class="mb-6 p-4 bg-gray-50 rounded-md border border-gray-200">
        <p class="text-gray-700">
          <i class="fas fa-info-circle mr-1 text-blue-500"></i>
          Uploading a file to folder <strong><%= parentFolder.name %></strong>
        </p>
      </div>
    <% } %>
    
    <form action="/scenarios/upload-file" method="POST" enctype="multipart/form-data">
      <% if (parentId) { %>
        <input type="hidden" name="parentId" value="<%= parentId %>">
      <% } %>
      
      <div class="mb-6">
        <label for="name" class="block text-sm font-medium text-gray-700 mb-1">File Name <span class="text-red-500">*</span></label>
        <input 
          type="text" 
          id="name" 
          name="name" 
          class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
          required
        >
      </div>
      
      <div class="mb-6">
        <label for="description" class="block text-sm font-medium text-gray-700 mb-1">Description</label>
        <textarea 
          id="description" 
          name="description" 
          rows="3" 
          class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
          placeholder="Add optional description for this file..."
        ></textarea>
      </div>
      
      <div class="mb-6">
        <label for="scenarioFile" class="block text-sm font-medium text-gray-700 mb-1">File <span class="text-red-500">*</span></label>
        <div class="mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-md" id="dropZone">
          <div class="space-y-1 text-center">
            <svg class="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48" aria-hidden="true">
              <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
            </svg>
            <div class="flex text-sm text-gray-600 justify-center">
              <label for="scenarioFile" class="relative cursor-pointer bg-white rounded-md font-medium text-blue-600 hover:text-blue-500 focus-within:outline-none">
                <span>Upload a file</span>
                <input id="scenarioFile" name="scenarioFile" type="file" class="sr-only" required>
              </label>
              <p class="pl-1">or drag and drop</p>
            </div>
            <p class="text-xs text-gray-500">
              All file types supported with no file size limits
            </p>
          </div>
        </div>
        <div id="filePreview" class="mt-2 text-sm text-gray-500 hidden">
          Selected file: <span id="fileName" class="font-medium"></span>
          <span id="fileSize" class="ml-2"></span>
        </div>
      </div>
      
      <div class="mt-6 flex justify-end">
        <a 
          href="/scenarios<%= parentId ? `?folder=${parentId}` : '' %>" 
          class="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 mr-3"
        >
          Cancel
        </a>
        <button 
          type="submit" 
          id="uploadButton"
          class="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          disabled
        >
          <span id="buttonText">Upload File</span>
          <span id="loadingSpinner" class="hidden">
            <i class="fas fa-spinner fa-spin"></i> Uploading...
          </span>
        </button>
      </div>
    </form>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const fileInput = document.getElementById('scenarioFile');
    const filePreview = document.getElementById('filePreview');
    const fileName = document.getElementById('fileName');
    const fileSize = document.getElementById('fileSize');
    const uploadButton = document.getElementById('uploadButton');
    const nameInput = document.getElementById('name');
    const buttonText = document.getElementById('buttonText');
    const loadingSpinner = document.getElementById('loadingSpinner');
    const dropZone = document.getElementById('dropZone');
    
    // Handle file input change
    fileInput.addEventListener('change', function() {
      updateFilePreview();
      updateButtonState();
    });
    
    // Handle name input change
    nameInput.addEventListener('input', function() {
      updateButtonState();
    });
    
    // Handle form submission - show loading state
    document.querySelector('form').addEventListener('submit', function() {
      buttonText.classList.add('hidden');
      loadingSpinner.classList.remove('hidden');
      uploadButton.disabled = true;
    });
    
    // Setup drag and drop
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
      dropZone.addEventListener(eventName, preventDefaults, false);
    });
    
    function preventDefaults(e) {
      e.preventDefault();
      e.stopPropagation();
    }
    
    ['dragenter', 'dragover'].forEach(eventName => {
      dropZone.addEventListener(eventName, highlight, false);
    });
    
    ['dragleave', 'drop'].forEach(eventName => {
      dropZone.addEventListener(eventName, unhighlight, false);
    });
    
    function highlight() {
      dropZone.classList.add('border-blue-300', 'bg-blue-50');
    }
    
    function unhighlight() {
      dropZone.classList.remove('border-blue-300', 'bg-blue-50');
    }
    
    dropZone.addEventListener('drop', handleDrop, false);
    
    function handleDrop(e) {
      const dt = e.dataTransfer;
      const files = dt.files;
      
      if (files && files.length > 0) {
        fileInput.files = files;
        
        // Also auto-populate the name field with the file name (without extension)
        const file = files[0];
        const fileNameWithoutExt = file.name.replace(/\.[^/.]+$/, "");
        
        if (!nameInput.value) {
          nameInput.value = fileNameWithoutExt;
        }
        
        updateFilePreview();
        updateButtonState();
      }
    }
    
    function updateFilePreview() {
      if (fileInput.files && fileInput.files.length > 0) {
        const file = fileInput.files[0];
        fileName.textContent = file.name;
        fileSize.textContent = formatFileSize(file.size);
        filePreview.classList.remove('hidden');
        
        // Auto-populate the name field if it's empty
        if (!nameInput.value) {
          const fileNameWithoutExt = file.name.replace(/\.[^/.]+$/, "");
          nameInput.value = fileNameWithoutExt;
        }
      } else {
        filePreview.classList.add('hidden');
      }
    }
    
    function updateButtonState() {
      const hasFile = fileInput.files && fileInput.files.length > 0;
      const hasName = nameInput.value.trim() !== '';
      uploadButton.disabled = !(hasFile && hasName);
    }
    
    function formatFileSize(bytes) {
      if (bytes === 0) return '0 Bytes';
      
      const k = 1024;
      const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
      const i = Math.floor(Math.log(bytes) / Math.log(k));
      
      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }
  });
</script>

<%- include('../partials/footer') %>